let ds = import("lib/datastructures.adv");
let utils = import("lib/utils.adv");
let str = import("lib/str.adv");

let lines = [];
read_lines("solutions/2021/data/04.txt", func(s) {
    lines.append(s);
});
let numbers = str.split(lines[0], ",");
numbers = utils.map(numbers, func(n) { return num(n) });

let boards = [];
let board = [];
for (let i = 2; i < len(lines); i = i + 1) {
    let row = str.split(lines[i], " ");
    if (len(row) == 0) {
        boards.append(board);
        board = [];
    } else {
        board = utils.concat(board, row);
    }
}
boards.append(board);

let is_winning_board = func(board, nums_so_far) {
    // Check rows
    for (let row = 0; row < 25; row = row + 5) {
        for (let i = 0; i < 5; i = i + 1) {
            if (nums_so_far.has(board[row + i]) == false) {
               break
            }
            if (i == 4) {
                return true
            }
        }
    }
    // Check columns
    for (let col = 0; col < 5; col = col + 1) {
        for (let i = 0; i < 25; i = i + 5) {
            if (nums_so_far.has(board[col + i]) == false) {
                break
            }
            if (i == 4) {
                return true
            }
        }
    }
    return false
};

let get_board_score = func(board, nums_so_far) {
    let sum_of_unmarked = 0;
    for (let i = 0; i < len(board); i = i + 1) {
        if (nums_so_far.has(board[i]) == false) {
            sum_of_unmarked = sum_of_unmarked + num(board[i]);
        }
    }
    return sum_of_unmarked
};

let nums_so_far = ds.str_set([]);
(func () {
    for (let i = 0; i < len(numbers); i = i + 1) {
        nums_so_far.add(numbers[i]);
        for (let j = 0; j < len(boards); j = j + 1) {
            if (is_winning_board(boards[j], nums_so_far) == true) {
                assert(numbers[i] * get_board_score(boards[j], nums_so_far), 32844);
                return
            }
        }
    }
})();

let nums_so_far2 = ds.str_set([]);
let boards_won = ds.str_set([]);
let score_order = [];
(func () {
    for (let i = 0; i < len(numbers); i = i + 1) {
        nums_so_far2.add(numbers[i]);
        for (let j = 0; j < len(boards); j = j + 1) {
            if (is_winning_board(boards[j], nums_so_far2) == true) {
                let score = numbers[i] * get_board_score(boards[j], nums_so_far2);
                if (boards_won.has(j) == false) {
                    boards_won.add(j);
                    score_order.append(score);
                }
            }
        }
    }
})();
assert(score_order[len(score_order) - 1], 4920);
