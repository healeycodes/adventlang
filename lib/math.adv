let max = func (x, y) {
    if (x > y) {
        return x
    }
    return y
};
assert(max(0, 1), 1);
assert(max(1, 0), 1);

let min = func (x, y) {
    if (x < y) {
        return x
    }
    return y
};
assert(min(0, 1), 0);
assert(min(1, 0), 0);

let binary_to_decimal = func(b) {
    let dec_value = 0;
    let base = 1;
     
    while(b > 0) {
        let last_digit = b % 10;
        b = floor(b / 10);
        dec_value = dec_value + last_digit * base;
        base = base * 2;
    }
    return dec_value;
};
assert(binary_to_decimal(0), 0);
assert(binary_to_decimal(10101001), 169);

let abs = func(x) {
    if (x < 0) {
        return -x
    }
    return x
};
assert(abs(2), 2);
assert(abs(-2), 2);
assert(abs(0), 0);

let min_list = func(l) {
    let _min = l[0];
    for (let i = 0; i < len(l); i = i + 1) {
        if (l[i] < _min) {
            _min = l[i];
        }
    }
    return _min
};
assert(min_list([0, 1]), 0);

let max_list = func(l) {
    let _max = l[0];
    for (let i = 0; i < len(l); i = i + 1) {
        if (l[i] > _max) {
            _max = l[i];
        }
    }
    return _max
};
assert(max_list([0, 1]), 1);

let sum_list = func(l) {
    let ret = 0;
    for (let i = 0; i < len(l); i = i + 1) {
        ret = ret + l[i];
    }
    return ret
};
assert(sum_list([1, 2]), 3);
